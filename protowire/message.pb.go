// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: message.proto

package protowire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KaspadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,101,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Payload:
	//	*KaspadRequest_GetCurrentNetworkRequest
	//	*KaspadRequest_SubmitBlockRequest
	//	*KaspadRequest_GetBlockTemplateRequest
	//	*KaspadRequest_NotifyBlockAddedRequest
	//	*KaspadRequest_GetPeerAddressesRequest
	//	*KaspadRequest_GetSinkRequest
	//	*KaspadRequest_GetMempoolEntryRequest
	//	*KaspadRequest_GetConnectedPeerInfoRequest
	//	*KaspadRequest_AddPeerRequest
	//	*KaspadRequest_SubmitTransactionRequest
	//	*KaspadRequest_NotifyVirtualChainChangedRequest
	//	*KaspadRequest_GetBlockRequest
	//	*KaspadRequest_GetSubnetworkRequest
	//	*KaspadRequest_GetVirtualChainFromBlockRequest
	//	*KaspadRequest_GetBlocksRequest
	//	*KaspadRequest_GetBlockCountRequest
	//	*KaspadRequest_GetBlockDagInfoRequest
	//	*KaspadRequest_ResolveFinalityConflictRequest
	//	*KaspadRequest_NotifyFinalityConflictRequest
	//	*KaspadRequest_GetMempoolEntriesRequest
	//	*KaspadRequest_ShutdownRequest
	//	*KaspadRequest_GetHeadersRequest
	//	*KaspadRequest_NotifyUtxosChangedRequest
	//	*KaspadRequest_GetUtxosByAddressesRequest
	//	*KaspadRequest_GetSinkBlueScoreRequest
	//	*KaspadRequest_NotifySinkBlueScoreChangedRequest
	//	*KaspadRequest_BanRequest
	//	*KaspadRequest_UnbanRequest
	//	*KaspadRequest_GetInfoRequest
	//	*KaspadRequest_StopNotifyingUtxosChangedRequest
	//	*KaspadRequest_NotifyPruningPointUtxoSetOverrideRequest
	//	*KaspadRequest_StopNotifyingPruningPointUtxoSetOverrideRequest
	//	*KaspadRequest_EstimateNetworkHashesPerSecondRequest
	//	*KaspadRequest_NotifyVirtualDaaScoreChangedRequest
	//	*KaspadRequest_GetBalanceByAddressRequest
	//	*KaspadRequest_GetBalancesByAddressesRequest
	//	*KaspadRequest_NotifyNewBlockTemplateRequest
	//	*KaspadRequest_GetMempoolEntriesByAddressesRequest
	//	*KaspadRequest_GetCoinSupplyRequest
	//	*KaspadRequest_PingRequest
	//	*KaspadRequest_GetMetricsRequest
	//	*KaspadRequest_GetServerInfoRequest
	//	*KaspadRequest_GetSyncStatusRequest
	//	*KaspadRequest_GetDaaScoreTimestampEstimateRequest
	//	*KaspadRequest_SubmitTransactionReplacementRequest
	//	*KaspadRequest_GetConnectionsRequest
	//	*KaspadRequest_GetSystemInfoRequest
	//	*KaspadRequest_GetFeeEstimateRequest
	//	*KaspadRequest_GetFeeEstimateExperimentalRequest
	//	*KaspadRequest_GetCurrentBlockColorRequest
	//	*KaspadRequest_GetUtxoReturnAddressRequest
	Payload isKaspadRequest_Payload `protobuf_oneof:"payload"`
}

func (x *KaspadRequest) Reset() {
	*x = KaspadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KaspadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KaspadRequest) ProtoMessage() {}

func (x *KaspadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KaspadRequest.ProtoReflect.Descriptor instead.
func (*KaspadRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *KaspadRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *KaspadRequest) GetPayload() isKaspadRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *KaspadRequest) GetGetCurrentNetworkRequest() *GetCurrentNetworkRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetCurrentNetworkRequest); ok {
		return x.GetCurrentNetworkRequest
	}
	return nil
}

func (x *KaspadRequest) GetSubmitBlockRequest() *SubmitBlockRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_SubmitBlockRequest); ok {
		return x.SubmitBlockRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBlockTemplateRequest() *GetBlockTemplateRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBlockTemplateRequest); ok {
		return x.GetBlockTemplateRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyBlockAddedRequest() *NotifyBlockAddedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyBlockAddedRequest); ok {
		return x.NotifyBlockAddedRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetPeerAddressesRequest() *GetPeerAddressesRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetPeerAddressesRequest); ok {
		return x.GetPeerAddressesRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetSinkRequest() *GetSinkRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetSinkRequest); ok {
		return x.GetSinkRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetMempoolEntryRequest() *GetMempoolEntryRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetMempoolEntryRequest); ok {
		return x.GetMempoolEntryRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetConnectedPeerInfoRequest() *GetConnectedPeerInfoRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetConnectedPeerInfoRequest); ok {
		return x.GetConnectedPeerInfoRequest
	}
	return nil
}

func (x *KaspadRequest) GetAddPeerRequest() *AddPeerRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_AddPeerRequest); ok {
		return x.AddPeerRequest
	}
	return nil
}

func (x *KaspadRequest) GetSubmitTransactionRequest() *SubmitTransactionRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_SubmitTransactionRequest); ok {
		return x.SubmitTransactionRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyVirtualChainChangedRequest() *NotifyVirtualChainChangedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyVirtualChainChangedRequest); ok {
		return x.NotifyVirtualChainChangedRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBlockRequest() *GetBlockRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBlockRequest); ok {
		return x.GetBlockRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetSubnetworkRequest() *GetSubnetworkRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetSubnetworkRequest); ok {
		return x.GetSubnetworkRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetVirtualChainFromBlockRequest() *GetVirtualChainFromBlockRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetVirtualChainFromBlockRequest); ok {
		return x.GetVirtualChainFromBlockRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBlocksRequest() *GetBlocksRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBlocksRequest); ok {
		return x.GetBlocksRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBlockCountRequest() *GetBlockCountRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBlockCountRequest); ok {
		return x.GetBlockCountRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBlockDagInfoRequest() *GetBlockDagInfoRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBlockDagInfoRequest); ok {
		return x.GetBlockDagInfoRequest
	}
	return nil
}

func (x *KaspadRequest) GetResolveFinalityConflictRequest() *ResolveFinalityConflictRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_ResolveFinalityConflictRequest); ok {
		return x.ResolveFinalityConflictRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyFinalityConflictRequest() *NotifyFinalityConflictRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyFinalityConflictRequest); ok {
		return x.NotifyFinalityConflictRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetMempoolEntriesRequest() *GetMempoolEntriesRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetMempoolEntriesRequest); ok {
		return x.GetMempoolEntriesRequest
	}
	return nil
}

func (x *KaspadRequest) GetShutdownRequest() *ShutdownRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_ShutdownRequest); ok {
		return x.ShutdownRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetHeadersRequest() *GetHeadersRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetHeadersRequest); ok {
		return x.GetHeadersRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyUtxosChangedRequest() *NotifyUtxosChangedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyUtxosChangedRequest); ok {
		return x.NotifyUtxosChangedRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetUtxosByAddressesRequest() *GetUtxosByAddressesRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetUtxosByAddressesRequest); ok {
		return x.GetUtxosByAddressesRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetSinkBlueScoreRequest() *GetSinkBlueScoreRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetSinkBlueScoreRequest); ok {
		return x.GetSinkBlueScoreRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifySinkBlueScoreChangedRequest() *NotifySinkBlueScoreChangedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifySinkBlueScoreChangedRequest); ok {
		return x.NotifySinkBlueScoreChangedRequest
	}
	return nil
}

func (x *KaspadRequest) GetBanRequest() *BanRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_BanRequest); ok {
		return x.BanRequest
	}
	return nil
}

func (x *KaspadRequest) GetUnbanRequest() *UnbanRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_UnbanRequest); ok {
		return x.UnbanRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetInfoRequest() *GetInfoRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetInfoRequest); ok {
		return x.GetInfoRequest
	}
	return nil
}

func (x *KaspadRequest) GetStopNotifyingUtxosChangedRequest() *StopNotifyingUtxosChangedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_StopNotifyingUtxosChangedRequest); ok {
		return x.StopNotifyingUtxosChangedRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyPruningPointUtxoSetOverrideRequest() *NotifyPruningPointUtxoSetOverrideRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyPruningPointUtxoSetOverrideRequest); ok {
		return x.NotifyPruningPointUtxoSetOverrideRequest
	}
	return nil
}

func (x *KaspadRequest) GetStopNotifyingPruningPointUtxoSetOverrideRequest() *StopNotifyingPruningPointUtxoSetOverrideRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_StopNotifyingPruningPointUtxoSetOverrideRequest); ok {
		return x.StopNotifyingPruningPointUtxoSetOverrideRequest
	}
	return nil
}

func (x *KaspadRequest) GetEstimateNetworkHashesPerSecondRequest() *EstimateNetworkHashesPerSecondRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_EstimateNetworkHashesPerSecondRequest); ok {
		return x.EstimateNetworkHashesPerSecondRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyVirtualDaaScoreChangedRequest() *NotifyVirtualDaaScoreChangedRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyVirtualDaaScoreChangedRequest); ok {
		return x.NotifyVirtualDaaScoreChangedRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBalanceByAddressRequest() *GetBalanceByAddressRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBalanceByAddressRequest); ok {
		return x.GetBalanceByAddressRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetBalancesByAddressesRequest() *GetBalancesByAddressesRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetBalancesByAddressesRequest); ok {
		return x.GetBalancesByAddressesRequest
	}
	return nil
}

func (x *KaspadRequest) GetNotifyNewBlockTemplateRequest() *NotifyNewBlockTemplateRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_NotifyNewBlockTemplateRequest); ok {
		return x.NotifyNewBlockTemplateRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetMempoolEntriesByAddressesRequest() *GetMempoolEntriesByAddressesRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetMempoolEntriesByAddressesRequest); ok {
		return x.GetMempoolEntriesByAddressesRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetCoinSupplyRequest() *GetCoinSupplyRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetCoinSupplyRequest); ok {
		return x.GetCoinSupplyRequest
	}
	return nil
}

func (x *KaspadRequest) GetPingRequest() *PingRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_PingRequest); ok {
		return x.PingRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetMetricsRequest() *GetMetricsRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetMetricsRequest); ok {
		return x.GetMetricsRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetServerInfoRequest() *GetServerInfoRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetServerInfoRequest); ok {
		return x.GetServerInfoRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetSyncStatusRequest() *GetSyncStatusRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetSyncStatusRequest); ok {
		return x.GetSyncStatusRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetDaaScoreTimestampEstimateRequest() *GetDaaScoreTimestampEstimateRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetDaaScoreTimestampEstimateRequest); ok {
		return x.GetDaaScoreTimestampEstimateRequest
	}
	return nil
}

func (x *KaspadRequest) GetSubmitTransactionReplacementRequest() *SubmitTransactionReplacementRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_SubmitTransactionReplacementRequest); ok {
		return x.SubmitTransactionReplacementRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetConnectionsRequest() *GetConnectionsRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetConnectionsRequest); ok {
		return x.GetConnectionsRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetSystemInfoRequest() *GetSystemInfoRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetSystemInfoRequest); ok {
		return x.GetSystemInfoRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetFeeEstimateRequest() *GetFeeEstimateRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetFeeEstimateRequest); ok {
		return x.GetFeeEstimateRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetFeeEstimateExperimentalRequest() *GetFeeEstimateExperimentalRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetFeeEstimateExperimentalRequest); ok {
		return x.GetFeeEstimateExperimentalRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetCurrentBlockColorRequest() *GetCurrentBlockColorRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetCurrentBlockColorRequest); ok {
		return x.GetCurrentBlockColorRequest
	}
	return nil
}

func (x *KaspadRequest) GetGetUtxoReturnAddressRequest() *GetUtxoReturnAddressRequestMessage {
	if x, ok := x.GetPayload().(*KaspadRequest_GetUtxoReturnAddressRequest); ok {
		return x.GetUtxoReturnAddressRequest
	}
	return nil
}

type isKaspadRequest_Payload interface {
	isKaspadRequest_Payload()
}

type KaspadRequest_GetCurrentNetworkRequest struct {
	GetCurrentNetworkRequest *GetCurrentNetworkRequestMessage `protobuf:"bytes,1001,opt,name=getCurrentNetworkRequest,proto3,oneof"`
}

type KaspadRequest_SubmitBlockRequest struct {
	SubmitBlockRequest *SubmitBlockRequestMessage `protobuf:"bytes,1003,opt,name=submitBlockRequest,proto3,oneof"`
}

type KaspadRequest_GetBlockTemplateRequest struct {
	GetBlockTemplateRequest *GetBlockTemplateRequestMessage `protobuf:"bytes,1005,opt,name=getBlockTemplateRequest,proto3,oneof"`
}

type KaspadRequest_NotifyBlockAddedRequest struct {
	NotifyBlockAddedRequest *NotifyBlockAddedRequestMessage `protobuf:"bytes,1007,opt,name=notifyBlockAddedRequest,proto3,oneof"`
}

type KaspadRequest_GetPeerAddressesRequest struct {
	// BlockAddedNotificationMessage blockAddedNotification = 1009;
	GetPeerAddressesRequest *GetPeerAddressesRequestMessage `protobuf:"bytes,1010,opt,name=getPeerAddressesRequest,proto3,oneof"`
}

type KaspadRequest_GetSinkRequest struct {
	GetSinkRequest *GetSinkRequestMessage `protobuf:"bytes,1012,opt,name=GetSinkRequest,proto3,oneof"`
}

type KaspadRequest_GetMempoolEntryRequest struct {
	GetMempoolEntryRequest *GetMempoolEntryRequestMessage `protobuf:"bytes,1014,opt,name=getMempoolEntryRequest,proto3,oneof"`
}

type KaspadRequest_GetConnectedPeerInfoRequest struct {
	GetConnectedPeerInfoRequest *GetConnectedPeerInfoRequestMessage `protobuf:"bytes,1016,opt,name=getConnectedPeerInfoRequest,proto3,oneof"`
}

type KaspadRequest_AddPeerRequest struct {
	AddPeerRequest *AddPeerRequestMessage `protobuf:"bytes,1018,opt,name=addPeerRequest,proto3,oneof"`
}

type KaspadRequest_SubmitTransactionRequest struct {
	SubmitTransactionRequest *SubmitTransactionRequestMessage `protobuf:"bytes,1020,opt,name=submitTransactionRequest,proto3,oneof"`
}

type KaspadRequest_NotifyVirtualChainChangedRequest struct {
	NotifyVirtualChainChangedRequest *NotifyVirtualChainChangedRequestMessage `protobuf:"bytes,1022,opt,name=notifyVirtualChainChangedRequest,proto3,oneof"`
}

type KaspadRequest_GetBlockRequest struct {
	// VirtualChainChangedNotificationMessage virtualChainChangedNotification = 1024;
	GetBlockRequest *GetBlockRequestMessage `protobuf:"bytes,1025,opt,name=getBlockRequest,proto3,oneof"`
}

type KaspadRequest_GetSubnetworkRequest struct {
	GetSubnetworkRequest *GetSubnetworkRequestMessage `protobuf:"bytes,1027,opt,name=getSubnetworkRequest,proto3,oneof"`
}

type KaspadRequest_GetVirtualChainFromBlockRequest struct {
	GetVirtualChainFromBlockRequest *GetVirtualChainFromBlockRequestMessage `protobuf:"bytes,1029,opt,name=getVirtualChainFromBlockRequest,proto3,oneof"`
}

type KaspadRequest_GetBlocksRequest struct {
	GetBlocksRequest *GetBlocksRequestMessage `protobuf:"bytes,1031,opt,name=getBlocksRequest,proto3,oneof"`
}

type KaspadRequest_GetBlockCountRequest struct {
	GetBlockCountRequest *GetBlockCountRequestMessage `protobuf:"bytes,1033,opt,name=getBlockCountRequest,proto3,oneof"`
}

type KaspadRequest_GetBlockDagInfoRequest struct {
	GetBlockDagInfoRequest *GetBlockDagInfoRequestMessage `protobuf:"bytes,1035,opt,name=getBlockDagInfoRequest,proto3,oneof"`
}

type KaspadRequest_ResolveFinalityConflictRequest struct {
	ResolveFinalityConflictRequest *ResolveFinalityConflictRequestMessage `protobuf:"bytes,1037,opt,name=resolveFinalityConflictRequest,proto3,oneof"`
}

type KaspadRequest_NotifyFinalityConflictRequest struct {
	NotifyFinalityConflictRequest *NotifyFinalityConflictRequestMessage `protobuf:"bytes,1039,opt,name=notifyFinalityConflictRequest,proto3,oneof"`
}

type KaspadRequest_GetMempoolEntriesRequest struct {
	// FinalityConflictNotificationMessage finalityConflictNotification = 1041;
	// FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
	GetMempoolEntriesRequest *GetMempoolEntriesRequestMessage `protobuf:"bytes,1043,opt,name=getMempoolEntriesRequest,proto3,oneof"`
}

type KaspadRequest_ShutdownRequest struct {
	ShutdownRequest *ShutdownRequestMessage `protobuf:"bytes,1045,opt,name=shutdownRequest,proto3,oneof"`
}

type KaspadRequest_GetHeadersRequest struct {
	GetHeadersRequest *GetHeadersRequestMessage `protobuf:"bytes,1047,opt,name=getHeadersRequest,proto3,oneof"`
}

type KaspadRequest_NotifyUtxosChangedRequest struct {
	NotifyUtxosChangedRequest *NotifyUtxosChangedRequestMessage `protobuf:"bytes,1049,opt,name=notifyUtxosChangedRequest,proto3,oneof"`
}

type KaspadRequest_GetUtxosByAddressesRequest struct {
	// UtxosChangedNotificationMessage utxosChangedNotification = 1051;
	GetUtxosByAddressesRequest *GetUtxosByAddressesRequestMessage `protobuf:"bytes,1052,opt,name=getUtxosByAddressesRequest,proto3,oneof"`
}

type KaspadRequest_GetSinkBlueScoreRequest struct {
	GetSinkBlueScoreRequest *GetSinkBlueScoreRequestMessage `protobuf:"bytes,1054,opt,name=getSinkBlueScoreRequest,proto3,oneof"`
}

type KaspadRequest_NotifySinkBlueScoreChangedRequest struct {
	NotifySinkBlueScoreChangedRequest *NotifySinkBlueScoreChangedRequestMessage `protobuf:"bytes,1056,opt,name=notifySinkBlueScoreChangedRequest,proto3,oneof"`
}

type KaspadRequest_BanRequest struct {
	// SinkBlueScoreChangedNotificationMessage sinkBlueScoreChangedNotification = 1058;
	BanRequest *BanRequestMessage `protobuf:"bytes,1059,opt,name=banRequest,proto3,oneof"`
}

type KaspadRequest_UnbanRequest struct {
	UnbanRequest *UnbanRequestMessage `protobuf:"bytes,1061,opt,name=unbanRequest,proto3,oneof"`
}

type KaspadRequest_GetInfoRequest struct {
	GetInfoRequest *GetInfoRequestMessage `protobuf:"bytes,1063,opt,name=getInfoRequest,proto3,oneof"`
}

type KaspadRequest_StopNotifyingUtxosChangedRequest struct {
	StopNotifyingUtxosChangedRequest *StopNotifyingUtxosChangedRequestMessage `protobuf:"bytes,1065,opt,name=stopNotifyingUtxosChangedRequest,proto3,oneof"`
}

type KaspadRequest_NotifyPruningPointUtxoSetOverrideRequest struct {
	NotifyPruningPointUtxoSetOverrideRequest *NotifyPruningPointUtxoSetOverrideRequestMessage `protobuf:"bytes,1067,opt,name=notifyPruningPointUtxoSetOverrideRequest,proto3,oneof"`
}

type KaspadRequest_StopNotifyingPruningPointUtxoSetOverrideRequest struct {
	// PruningPointUtxoSetOverrideNotificationMessage pruningPointUtxoSetOverrideNotification = 1069;
	StopNotifyingPruningPointUtxoSetOverrideRequest *StopNotifyingPruningPointUtxoSetOverrideRequestMessage `protobuf:"bytes,1070,opt,name=stopNotifyingPruningPointUtxoSetOverrideRequest,proto3,oneof"`
}

type KaspadRequest_EstimateNetworkHashesPerSecondRequest struct {
	EstimateNetworkHashesPerSecondRequest *EstimateNetworkHashesPerSecondRequestMessage `protobuf:"bytes,1072,opt,name=estimateNetworkHashesPerSecondRequest,proto3,oneof"`
}

type KaspadRequest_NotifyVirtualDaaScoreChangedRequest struct {
	NotifyVirtualDaaScoreChangedRequest *NotifyVirtualDaaScoreChangedRequestMessage `protobuf:"bytes,1074,opt,name=notifyVirtualDaaScoreChangedRequest,proto3,oneof"`
}

type KaspadRequest_GetBalanceByAddressRequest struct {
	// VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
	GetBalanceByAddressRequest *GetBalanceByAddressRequestMessage `protobuf:"bytes,1077,opt,name=getBalanceByAddressRequest,proto3,oneof"`
}

type KaspadRequest_GetBalancesByAddressesRequest struct {
	GetBalancesByAddressesRequest *GetBalancesByAddressesRequestMessage `protobuf:"bytes,1079,opt,name=getBalancesByAddressesRequest,proto3,oneof"`
}

type KaspadRequest_NotifyNewBlockTemplateRequest struct {
	NotifyNewBlockTemplateRequest *NotifyNewBlockTemplateRequestMessage `protobuf:"bytes,1081,opt,name=notifyNewBlockTemplateRequest,proto3,oneof"`
}

type KaspadRequest_GetMempoolEntriesByAddressesRequest struct {
	// NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
	GetMempoolEntriesByAddressesRequest *GetMempoolEntriesByAddressesRequestMessage `protobuf:"bytes,1084,opt,name=getMempoolEntriesByAddressesRequest,proto3,oneof"`
}

type KaspadRequest_GetCoinSupplyRequest struct {
	GetCoinSupplyRequest *GetCoinSupplyRequestMessage `protobuf:"bytes,1086,opt,name=getCoinSupplyRequest,proto3,oneof"`
}

type KaspadRequest_PingRequest struct {
	PingRequest *PingRequestMessage `protobuf:"bytes,1088,opt,name=pingRequest,proto3,oneof"`
}

type KaspadRequest_GetMetricsRequest struct {
	GetMetricsRequest *GetMetricsRequestMessage `protobuf:"bytes,1090,opt,name=getMetricsRequest,proto3,oneof"`
}

type KaspadRequest_GetServerInfoRequest struct {
	GetServerInfoRequest *GetServerInfoRequestMessage `protobuf:"bytes,1092,opt,name=getServerInfoRequest,proto3,oneof"`
}

type KaspadRequest_GetSyncStatusRequest struct {
	GetSyncStatusRequest *GetSyncStatusRequestMessage `protobuf:"bytes,1094,opt,name=getSyncStatusRequest,proto3,oneof"`
}

type KaspadRequest_GetDaaScoreTimestampEstimateRequest struct {
	GetDaaScoreTimestampEstimateRequest *GetDaaScoreTimestampEstimateRequestMessage `protobuf:"bytes,1096,opt,name=getDaaScoreTimestampEstimateRequest,proto3,oneof"`
}

type KaspadRequest_SubmitTransactionReplacementRequest struct {
	SubmitTransactionReplacementRequest *SubmitTransactionReplacementRequestMessage `protobuf:"bytes,1100,opt,name=submitTransactionReplacementRequest,proto3,oneof"`
}

type KaspadRequest_GetConnectionsRequest struct {
	GetConnectionsRequest *GetConnectionsRequestMessage `protobuf:"bytes,1102,opt,name=getConnectionsRequest,proto3,oneof"`
}

type KaspadRequest_GetSystemInfoRequest struct {
	GetSystemInfoRequest *GetSystemInfoRequestMessage `protobuf:"bytes,1104,opt,name=getSystemInfoRequest,proto3,oneof"`
}

type KaspadRequest_GetFeeEstimateRequest struct {
	GetFeeEstimateRequest *GetFeeEstimateRequestMessage `protobuf:"bytes,1106,opt,name=getFeeEstimateRequest,proto3,oneof"`
}

type KaspadRequest_GetFeeEstimateExperimentalRequest struct {
	GetFeeEstimateExperimentalRequest *GetFeeEstimateExperimentalRequestMessage `protobuf:"bytes,1108,opt,name=getFeeEstimateExperimentalRequest,proto3,oneof"`
}

type KaspadRequest_GetCurrentBlockColorRequest struct {
	GetCurrentBlockColorRequest *GetCurrentBlockColorRequestMessage `protobuf:"bytes,1110,opt,name=getCurrentBlockColorRequest,proto3,oneof"`
}

type KaspadRequest_GetUtxoReturnAddressRequest struct {
	GetUtxoReturnAddressRequest *GetUtxoReturnAddressRequestMessage `protobuf:"bytes,1112,opt,name=GetUtxoReturnAddressRequest,proto3,oneof"`
}

func (*KaspadRequest_GetCurrentNetworkRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_SubmitBlockRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBlockTemplateRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyBlockAddedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetPeerAddressesRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetSinkRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetMempoolEntryRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetConnectedPeerInfoRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_AddPeerRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_SubmitTransactionRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyVirtualChainChangedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBlockRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetSubnetworkRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetVirtualChainFromBlockRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBlocksRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBlockCountRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBlockDagInfoRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_ResolveFinalityConflictRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyFinalityConflictRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetMempoolEntriesRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_ShutdownRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetHeadersRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyUtxosChangedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetUtxosByAddressesRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetSinkBlueScoreRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifySinkBlueScoreChangedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_BanRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_UnbanRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetInfoRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_StopNotifyingUtxosChangedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyPruningPointUtxoSetOverrideRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_StopNotifyingPruningPointUtxoSetOverrideRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_EstimateNetworkHashesPerSecondRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyVirtualDaaScoreChangedRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBalanceByAddressRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetBalancesByAddressesRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_NotifyNewBlockTemplateRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetMempoolEntriesByAddressesRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetCoinSupplyRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_PingRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetMetricsRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetServerInfoRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetSyncStatusRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetDaaScoreTimestampEstimateRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_SubmitTransactionReplacementRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetConnectionsRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetSystemInfoRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetFeeEstimateRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetFeeEstimateExperimentalRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetCurrentBlockColorRequest) isKaspadRequest_Payload() {}

func (*KaspadRequest_GetUtxoReturnAddressRequest) isKaspadRequest_Payload() {}

type KaspadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,101,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Payload:
	//	*KaspadResponse_GetCurrentNetworkResponse
	//	*KaspadResponse_SubmitBlockResponse
	//	*KaspadResponse_GetBlockTemplateResponse
	//	*KaspadResponse_NotifyBlockAddedResponse
	//	*KaspadResponse_BlockAddedNotification
	//	*KaspadResponse_GetPeerAddressesResponse
	//	*KaspadResponse_GetSinkResponse
	//	*KaspadResponse_GetMempoolEntryResponse
	//	*KaspadResponse_GetConnectedPeerInfoResponse
	//	*KaspadResponse_AddPeerResponse
	//	*KaspadResponse_SubmitTransactionResponse
	//	*KaspadResponse_NotifyVirtualChainChangedResponse
	//	*KaspadResponse_VirtualChainChangedNotification
	//	*KaspadResponse_GetBlockResponse
	//	*KaspadResponse_GetSubnetworkResponse
	//	*KaspadResponse_GetVirtualChainFromBlockResponse
	//	*KaspadResponse_GetBlocksResponse
	//	*KaspadResponse_GetBlockCountResponse
	//	*KaspadResponse_GetBlockDagInfoResponse
	//	*KaspadResponse_ResolveFinalityConflictResponse
	//	*KaspadResponse_NotifyFinalityConflictResponse
	//	*KaspadResponse_FinalityConflictNotification
	//	*KaspadResponse_FinalityConflictResolvedNotification
	//	*KaspadResponse_GetMempoolEntriesResponse
	//	*KaspadResponse_ShutdownResponse
	//	*KaspadResponse_GetHeadersResponse
	//	*KaspadResponse_NotifyUtxosChangedResponse
	//	*KaspadResponse_UtxosChangedNotification
	//	*KaspadResponse_GetUtxosByAddressesResponse
	//	*KaspadResponse_GetSinkBlueScoreResponse
	//	*KaspadResponse_NotifySinkBlueScoreChangedResponse
	//	*KaspadResponse_SinkBlueScoreChangedNotification
	//	*KaspadResponse_BanResponse
	//	*KaspadResponse_UnbanResponse
	//	*KaspadResponse_GetInfoResponse
	//	*KaspadResponse_StopNotifyingUtxosChangedResponse
	//	*KaspadResponse_NotifyPruningPointUtxoSetOverrideResponse
	//	*KaspadResponse_PruningPointUtxoSetOverrideNotification
	//	*KaspadResponse_StopNotifyingPruningPointUtxoSetOverrideResponse
	//	*KaspadResponse_EstimateNetworkHashesPerSecondResponse
	//	*KaspadResponse_NotifyVirtualDaaScoreChangedResponse
	//	*KaspadResponse_VirtualDaaScoreChangedNotification
	//	*KaspadResponse_GetBalanceByAddressResponse
	//	*KaspadResponse_GetBalancesByAddressesResponse
	//	*KaspadResponse_NotifyNewBlockTemplateResponse
	//	*KaspadResponse_NewBlockTemplateNotification
	//	*KaspadResponse_GetMempoolEntriesByAddressesResponse
	//	*KaspadResponse_GetCoinSupplyResponse
	//	*KaspadResponse_PingResponse
	//	*KaspadResponse_GetMetricsResponse
	//	*KaspadResponse_GetServerInfoResponse
	//	*KaspadResponse_GetSyncStatusResponse
	//	*KaspadResponse_GetDaaScoreTimestampEstimateResponse
	//	*KaspadResponse_SubmitTransactionReplacementResponse
	//	*KaspadResponse_GetConnectionsResponse
	//	*KaspadResponse_GetSystemInfoResponse
	//	*KaspadResponse_GetFeeEstimateResponse
	//	*KaspadResponse_GetFeeEstimateExperimentalResponse
	//	*KaspadResponse_GetCurrentBlockColorResponse
	//	*KaspadResponse_GetUtxoReturnAddressResponse
	Payload isKaspadResponse_Payload `protobuf_oneof:"payload"`
}

func (x *KaspadResponse) Reset() {
	*x = KaspadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KaspadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KaspadResponse) ProtoMessage() {}

func (x *KaspadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KaspadResponse.ProtoReflect.Descriptor instead.
func (*KaspadResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *KaspadResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *KaspadResponse) GetPayload() isKaspadResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *KaspadResponse) GetGetCurrentNetworkResponse() *GetCurrentNetworkResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetCurrentNetworkResponse); ok {
		return x.GetCurrentNetworkResponse
	}
	return nil
}

func (x *KaspadResponse) GetSubmitBlockResponse() *SubmitBlockResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_SubmitBlockResponse); ok {
		return x.SubmitBlockResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetBlockTemplateResponse() *GetBlockTemplateResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBlockTemplateResponse); ok {
		return x.GetBlockTemplateResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyBlockAddedResponse() *NotifyBlockAddedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyBlockAddedResponse); ok {
		return x.NotifyBlockAddedResponse
	}
	return nil
}

func (x *KaspadResponse) GetBlockAddedNotification() *BlockAddedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_BlockAddedNotification); ok {
		return x.BlockAddedNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetPeerAddressesResponse() *GetPeerAddressesResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetPeerAddressesResponse); ok {
		return x.GetPeerAddressesResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetSinkResponse() *GetSinkResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetSinkResponse); ok {
		return x.GetSinkResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetMempoolEntryResponse() *GetMempoolEntryResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetMempoolEntryResponse); ok {
		return x.GetMempoolEntryResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetConnectedPeerInfoResponse() *GetConnectedPeerInfoResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetConnectedPeerInfoResponse); ok {
		return x.GetConnectedPeerInfoResponse
	}
	return nil
}

func (x *KaspadResponse) GetAddPeerResponse() *AddPeerResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_AddPeerResponse); ok {
		return x.AddPeerResponse
	}
	return nil
}

func (x *KaspadResponse) GetSubmitTransactionResponse() *SubmitTransactionResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_SubmitTransactionResponse); ok {
		return x.SubmitTransactionResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyVirtualChainChangedResponse() *NotifyVirtualChainChangedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyVirtualChainChangedResponse); ok {
		return x.NotifyVirtualChainChangedResponse
	}
	return nil
}

func (x *KaspadResponse) GetVirtualChainChangedNotification() *VirtualChainChangedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_VirtualChainChangedNotification); ok {
		return x.VirtualChainChangedNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetBlockResponse() *GetBlockResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBlockResponse); ok {
		return x.GetBlockResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetSubnetworkResponse() *GetSubnetworkResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetSubnetworkResponse); ok {
		return x.GetSubnetworkResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetVirtualChainFromBlockResponse() *GetVirtualChainFromBlockResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetVirtualChainFromBlockResponse); ok {
		return x.GetVirtualChainFromBlockResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetBlocksResponse() *GetBlocksResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBlocksResponse); ok {
		return x.GetBlocksResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetBlockCountResponse() *GetBlockCountResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBlockCountResponse); ok {
		return x.GetBlockCountResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetBlockDagInfoResponse() *GetBlockDagInfoResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBlockDagInfoResponse); ok {
		return x.GetBlockDagInfoResponse
	}
	return nil
}

func (x *KaspadResponse) GetResolveFinalityConflictResponse() *ResolveFinalityConflictResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_ResolveFinalityConflictResponse); ok {
		return x.ResolveFinalityConflictResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyFinalityConflictResponse() *NotifyFinalityConflictResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyFinalityConflictResponse); ok {
		return x.NotifyFinalityConflictResponse
	}
	return nil
}

func (x *KaspadResponse) GetFinalityConflictNotification() *FinalityConflictNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_FinalityConflictNotification); ok {
		return x.FinalityConflictNotification
	}
	return nil
}

func (x *KaspadResponse) GetFinalityConflictResolvedNotification() *FinalityConflictResolvedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_FinalityConflictResolvedNotification); ok {
		return x.FinalityConflictResolvedNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetMempoolEntriesResponse() *GetMempoolEntriesResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetMempoolEntriesResponse); ok {
		return x.GetMempoolEntriesResponse
	}
	return nil
}

func (x *KaspadResponse) GetShutdownResponse() *ShutdownResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_ShutdownResponse); ok {
		return x.ShutdownResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetHeadersResponse() *GetHeadersResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetHeadersResponse); ok {
		return x.GetHeadersResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyUtxosChangedResponse() *NotifyUtxosChangedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyUtxosChangedResponse); ok {
		return x.NotifyUtxosChangedResponse
	}
	return nil
}

func (x *KaspadResponse) GetUtxosChangedNotification() *UtxosChangedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_UtxosChangedNotification); ok {
		return x.UtxosChangedNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetUtxosByAddressesResponse() *GetUtxosByAddressesResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetUtxosByAddressesResponse); ok {
		return x.GetUtxosByAddressesResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetSinkBlueScoreResponse() *GetSinkBlueScoreResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetSinkBlueScoreResponse); ok {
		return x.GetSinkBlueScoreResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifySinkBlueScoreChangedResponse() *NotifySinkBlueScoreChangedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifySinkBlueScoreChangedResponse); ok {
		return x.NotifySinkBlueScoreChangedResponse
	}
	return nil
}

func (x *KaspadResponse) GetSinkBlueScoreChangedNotification() *SinkBlueScoreChangedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_SinkBlueScoreChangedNotification); ok {
		return x.SinkBlueScoreChangedNotification
	}
	return nil
}

func (x *KaspadResponse) GetBanResponse() *BanResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_BanResponse); ok {
		return x.BanResponse
	}
	return nil
}

func (x *KaspadResponse) GetUnbanResponse() *UnbanResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_UnbanResponse); ok {
		return x.UnbanResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetInfoResponse() *GetInfoResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetInfoResponse); ok {
		return x.GetInfoResponse
	}
	return nil
}

func (x *KaspadResponse) GetStopNotifyingUtxosChangedResponse() *StopNotifyingUtxosChangedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_StopNotifyingUtxosChangedResponse); ok {
		return x.StopNotifyingUtxosChangedResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyPruningPointUtxoSetOverrideResponse() *NotifyPruningPointUtxoSetOverrideResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyPruningPointUtxoSetOverrideResponse); ok {
		return x.NotifyPruningPointUtxoSetOverrideResponse
	}
	return nil
}

func (x *KaspadResponse) GetPruningPointUtxoSetOverrideNotification() *PruningPointUtxoSetOverrideNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_PruningPointUtxoSetOverrideNotification); ok {
		return x.PruningPointUtxoSetOverrideNotification
	}
	return nil
}

func (x *KaspadResponse) GetStopNotifyingPruningPointUtxoSetOverrideResponse() *StopNotifyingPruningPointUtxoSetOverrideResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_StopNotifyingPruningPointUtxoSetOverrideResponse); ok {
		return x.StopNotifyingPruningPointUtxoSetOverrideResponse
	}
	return nil
}

func (x *KaspadResponse) GetEstimateNetworkHashesPerSecondResponse() *EstimateNetworkHashesPerSecondResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_EstimateNetworkHashesPerSecondResponse); ok {
		return x.EstimateNetworkHashesPerSecondResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyVirtualDaaScoreChangedResponse() *NotifyVirtualDaaScoreChangedResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyVirtualDaaScoreChangedResponse); ok {
		return x.NotifyVirtualDaaScoreChangedResponse
	}
	return nil
}

func (x *KaspadResponse) GetVirtualDaaScoreChangedNotification() *VirtualDaaScoreChangedNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_VirtualDaaScoreChangedNotification); ok {
		return x.VirtualDaaScoreChangedNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetBalanceByAddressResponse() *GetBalanceByAddressResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBalanceByAddressResponse); ok {
		return x.GetBalanceByAddressResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetBalancesByAddressesResponse() *GetBalancesByAddressesResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetBalancesByAddressesResponse); ok {
		return x.GetBalancesByAddressesResponse
	}
	return nil
}

func (x *KaspadResponse) GetNotifyNewBlockTemplateResponse() *NotifyNewBlockTemplateResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NotifyNewBlockTemplateResponse); ok {
		return x.NotifyNewBlockTemplateResponse
	}
	return nil
}

func (x *KaspadResponse) GetNewBlockTemplateNotification() *NewBlockTemplateNotificationMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_NewBlockTemplateNotification); ok {
		return x.NewBlockTemplateNotification
	}
	return nil
}

func (x *KaspadResponse) GetGetMempoolEntriesByAddressesResponse() *GetMempoolEntriesByAddressesResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetMempoolEntriesByAddressesResponse); ok {
		return x.GetMempoolEntriesByAddressesResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetCoinSupplyResponse() *GetCoinSupplyResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetCoinSupplyResponse); ok {
		return x.GetCoinSupplyResponse
	}
	return nil
}

func (x *KaspadResponse) GetPingResponse() *PingResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_PingResponse); ok {
		return x.PingResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetMetricsResponse() *GetMetricsResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetMetricsResponse); ok {
		return x.GetMetricsResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetServerInfoResponse() *GetServerInfoResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetServerInfoResponse); ok {
		return x.GetServerInfoResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetSyncStatusResponse() *GetSyncStatusResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetSyncStatusResponse); ok {
		return x.GetSyncStatusResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetDaaScoreTimestampEstimateResponse() *GetDaaScoreTimestampEstimateResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetDaaScoreTimestampEstimateResponse); ok {
		return x.GetDaaScoreTimestampEstimateResponse
	}
	return nil
}

func (x *KaspadResponse) GetSubmitTransactionReplacementResponse() *SubmitTransactionReplacementResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_SubmitTransactionReplacementResponse); ok {
		return x.SubmitTransactionReplacementResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetConnectionsResponse() *GetConnectionsResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetConnectionsResponse); ok {
		return x.GetConnectionsResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetSystemInfoResponse() *GetSystemInfoResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetSystemInfoResponse); ok {
		return x.GetSystemInfoResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetFeeEstimateResponse() *GetFeeEstimateResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetFeeEstimateResponse); ok {
		return x.GetFeeEstimateResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetFeeEstimateExperimentalResponse() *GetFeeEstimateExperimentalResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetFeeEstimateExperimentalResponse); ok {
		return x.GetFeeEstimateExperimentalResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetCurrentBlockColorResponse() *GetCurrentBlockColorResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetCurrentBlockColorResponse); ok {
		return x.GetCurrentBlockColorResponse
	}
	return nil
}

func (x *KaspadResponse) GetGetUtxoReturnAddressResponse() *GetUtxoReturnAddressResponseMessage {
	if x, ok := x.GetPayload().(*KaspadResponse_GetUtxoReturnAddressResponse); ok {
		return x.GetUtxoReturnAddressResponse
	}
	return nil
}

type isKaspadResponse_Payload interface {
	isKaspadResponse_Payload()
}

type KaspadResponse_GetCurrentNetworkResponse struct {
	GetCurrentNetworkResponse *GetCurrentNetworkResponseMessage `protobuf:"bytes,1002,opt,name=getCurrentNetworkResponse,proto3,oneof"`
}

type KaspadResponse_SubmitBlockResponse struct {
	SubmitBlockResponse *SubmitBlockResponseMessage `protobuf:"bytes,1004,opt,name=submitBlockResponse,proto3,oneof"`
}

type KaspadResponse_GetBlockTemplateResponse struct {
	GetBlockTemplateResponse *GetBlockTemplateResponseMessage `protobuf:"bytes,1006,opt,name=getBlockTemplateResponse,proto3,oneof"`
}

type KaspadResponse_NotifyBlockAddedResponse struct {
	NotifyBlockAddedResponse *NotifyBlockAddedResponseMessage `protobuf:"bytes,1008,opt,name=notifyBlockAddedResponse,proto3,oneof"`
}

type KaspadResponse_BlockAddedNotification struct {
	BlockAddedNotification *BlockAddedNotificationMessage `protobuf:"bytes,1009,opt,name=blockAddedNotification,proto3,oneof"`
}

type KaspadResponse_GetPeerAddressesResponse struct {
	GetPeerAddressesResponse *GetPeerAddressesResponseMessage `protobuf:"bytes,1011,opt,name=getPeerAddressesResponse,proto3,oneof"`
}

type KaspadResponse_GetSinkResponse struct {
	GetSinkResponse *GetSinkResponseMessage `protobuf:"bytes,1013,opt,name=GetSinkResponse,proto3,oneof"`
}

type KaspadResponse_GetMempoolEntryResponse struct {
	GetMempoolEntryResponse *GetMempoolEntryResponseMessage `protobuf:"bytes,1015,opt,name=getMempoolEntryResponse,proto3,oneof"`
}

type KaspadResponse_GetConnectedPeerInfoResponse struct {
	GetConnectedPeerInfoResponse *GetConnectedPeerInfoResponseMessage `protobuf:"bytes,1017,opt,name=getConnectedPeerInfoResponse,proto3,oneof"`
}

type KaspadResponse_AddPeerResponse struct {
	AddPeerResponse *AddPeerResponseMessage `protobuf:"bytes,1019,opt,name=addPeerResponse,proto3,oneof"`
}

type KaspadResponse_SubmitTransactionResponse struct {
	SubmitTransactionResponse *SubmitTransactionResponseMessage `protobuf:"bytes,1021,opt,name=submitTransactionResponse,proto3,oneof"`
}

type KaspadResponse_NotifyVirtualChainChangedResponse struct {
	NotifyVirtualChainChangedResponse *NotifyVirtualChainChangedResponseMessage `protobuf:"bytes,1023,opt,name=notifyVirtualChainChangedResponse,proto3,oneof"`
}

type KaspadResponse_VirtualChainChangedNotification struct {
	VirtualChainChangedNotification *VirtualChainChangedNotificationMessage `protobuf:"bytes,1024,opt,name=virtualChainChangedNotification,proto3,oneof"`
}

type KaspadResponse_GetBlockResponse struct {
	GetBlockResponse *GetBlockResponseMessage `protobuf:"bytes,1026,opt,name=getBlockResponse,proto3,oneof"`
}

type KaspadResponse_GetSubnetworkResponse struct {
	GetSubnetworkResponse *GetSubnetworkResponseMessage `protobuf:"bytes,1028,opt,name=getSubnetworkResponse,proto3,oneof"`
}

type KaspadResponse_GetVirtualChainFromBlockResponse struct {
	GetVirtualChainFromBlockResponse *GetVirtualChainFromBlockResponseMessage `protobuf:"bytes,1030,opt,name=getVirtualChainFromBlockResponse,proto3,oneof"`
}

type KaspadResponse_GetBlocksResponse struct {
	GetBlocksResponse *GetBlocksResponseMessage `protobuf:"bytes,1032,opt,name=getBlocksResponse,proto3,oneof"`
}

type KaspadResponse_GetBlockCountResponse struct {
	GetBlockCountResponse *GetBlockCountResponseMessage `protobuf:"bytes,1034,opt,name=getBlockCountResponse,proto3,oneof"`
}

type KaspadResponse_GetBlockDagInfoResponse struct {
	GetBlockDagInfoResponse *GetBlockDagInfoResponseMessage `protobuf:"bytes,1036,opt,name=getBlockDagInfoResponse,proto3,oneof"`
}

type KaspadResponse_ResolveFinalityConflictResponse struct {
	ResolveFinalityConflictResponse *ResolveFinalityConflictResponseMessage `protobuf:"bytes,1038,opt,name=resolveFinalityConflictResponse,proto3,oneof"`
}

type KaspadResponse_NotifyFinalityConflictResponse struct {
	NotifyFinalityConflictResponse *NotifyFinalityConflictResponseMessage `protobuf:"bytes,1040,opt,name=notifyFinalityConflictResponse,proto3,oneof"`
}

type KaspadResponse_FinalityConflictNotification struct {
	FinalityConflictNotification *FinalityConflictNotificationMessage `protobuf:"bytes,1041,opt,name=finalityConflictNotification,proto3,oneof"`
}

type KaspadResponse_FinalityConflictResolvedNotification struct {
	FinalityConflictResolvedNotification *FinalityConflictResolvedNotificationMessage `protobuf:"bytes,1042,opt,name=finalityConflictResolvedNotification,proto3,oneof"`
}

type KaspadResponse_GetMempoolEntriesResponse struct {
	GetMempoolEntriesResponse *GetMempoolEntriesResponseMessage `protobuf:"bytes,1044,opt,name=getMempoolEntriesResponse,proto3,oneof"`
}

type KaspadResponse_ShutdownResponse struct {
	ShutdownResponse *ShutdownResponseMessage `protobuf:"bytes,1046,opt,name=shutdownResponse,proto3,oneof"`
}

type KaspadResponse_GetHeadersResponse struct {
	GetHeadersResponse *GetHeadersResponseMessage `protobuf:"bytes,1048,opt,name=getHeadersResponse,proto3,oneof"`
}

type KaspadResponse_NotifyUtxosChangedResponse struct {
	NotifyUtxosChangedResponse *NotifyUtxosChangedResponseMessage `protobuf:"bytes,1050,opt,name=notifyUtxosChangedResponse,proto3,oneof"`
}

type KaspadResponse_UtxosChangedNotification struct {
	UtxosChangedNotification *UtxosChangedNotificationMessage `protobuf:"bytes,1051,opt,name=utxosChangedNotification,proto3,oneof"`
}

type KaspadResponse_GetUtxosByAddressesResponse struct {
	GetUtxosByAddressesResponse *GetUtxosByAddressesResponseMessage `protobuf:"bytes,1053,opt,name=getUtxosByAddressesResponse,proto3,oneof"`
}

type KaspadResponse_GetSinkBlueScoreResponse struct {
	GetSinkBlueScoreResponse *GetSinkBlueScoreResponseMessage `protobuf:"bytes,1055,opt,name=getSinkBlueScoreResponse,proto3,oneof"`
}

type KaspadResponse_NotifySinkBlueScoreChangedResponse struct {
	NotifySinkBlueScoreChangedResponse *NotifySinkBlueScoreChangedResponseMessage `protobuf:"bytes,1057,opt,name=notifySinkBlueScoreChangedResponse,proto3,oneof"`
}

type KaspadResponse_SinkBlueScoreChangedNotification struct {
	SinkBlueScoreChangedNotification *SinkBlueScoreChangedNotificationMessage `protobuf:"bytes,1058,opt,name=sinkBlueScoreChangedNotification,proto3,oneof"`
}

type KaspadResponse_BanResponse struct {
	BanResponse *BanResponseMessage `protobuf:"bytes,1060,opt,name=banResponse,proto3,oneof"`
}

type KaspadResponse_UnbanResponse struct {
	UnbanResponse *UnbanResponseMessage `protobuf:"bytes,1062,opt,name=unbanResponse,proto3,oneof"`
}

type KaspadResponse_GetInfoResponse struct {
	GetInfoResponse *GetInfoResponseMessage `protobuf:"bytes,1064,opt,name=getInfoResponse,proto3,oneof"`
}

type KaspadResponse_StopNotifyingUtxosChangedResponse struct {
	StopNotifyingUtxosChangedResponse *StopNotifyingUtxosChangedResponseMessage `protobuf:"bytes,1066,opt,name=stopNotifyingUtxosChangedResponse,proto3,oneof"`
}

type KaspadResponse_NotifyPruningPointUtxoSetOverrideResponse struct {
	NotifyPruningPointUtxoSetOverrideResponse *NotifyPruningPointUtxoSetOverrideResponseMessage `protobuf:"bytes,1068,opt,name=notifyPruningPointUtxoSetOverrideResponse,proto3,oneof"`
}

type KaspadResponse_PruningPointUtxoSetOverrideNotification struct {
	PruningPointUtxoSetOverrideNotification *PruningPointUtxoSetOverrideNotificationMessage `protobuf:"bytes,1069,opt,name=pruningPointUtxoSetOverrideNotification,proto3,oneof"`
}

type KaspadResponse_StopNotifyingPruningPointUtxoSetOverrideResponse struct {
	StopNotifyingPruningPointUtxoSetOverrideResponse *StopNotifyingPruningPointUtxoSetOverrideResponseMessage `protobuf:"bytes,1071,opt,name=stopNotifyingPruningPointUtxoSetOverrideResponse,proto3,oneof"`
}

type KaspadResponse_EstimateNetworkHashesPerSecondResponse struct {
	EstimateNetworkHashesPerSecondResponse *EstimateNetworkHashesPerSecondResponseMessage `protobuf:"bytes,1073,opt,name=estimateNetworkHashesPerSecondResponse,proto3,oneof"`
}

type KaspadResponse_NotifyVirtualDaaScoreChangedResponse struct {
	NotifyVirtualDaaScoreChangedResponse *NotifyVirtualDaaScoreChangedResponseMessage `protobuf:"bytes,1075,opt,name=notifyVirtualDaaScoreChangedResponse,proto3,oneof"`
}

type KaspadResponse_VirtualDaaScoreChangedNotification struct {
	VirtualDaaScoreChangedNotification *VirtualDaaScoreChangedNotificationMessage `protobuf:"bytes,1076,opt,name=virtualDaaScoreChangedNotification,proto3,oneof"`
}

type KaspadResponse_GetBalanceByAddressResponse struct {
	GetBalanceByAddressResponse *GetBalanceByAddressResponseMessage `protobuf:"bytes,1078,opt,name=getBalanceByAddressResponse,proto3,oneof"`
}

type KaspadResponse_GetBalancesByAddressesResponse struct {
	GetBalancesByAddressesResponse *GetBalancesByAddressesResponseMessage `protobuf:"bytes,1080,opt,name=getBalancesByAddressesResponse,proto3,oneof"`
}

type KaspadResponse_NotifyNewBlockTemplateResponse struct {
	NotifyNewBlockTemplateResponse *NotifyNewBlockTemplateResponseMessage `protobuf:"bytes,1082,opt,name=notifyNewBlockTemplateResponse,proto3,oneof"`
}

type KaspadResponse_NewBlockTemplateNotification struct {
	NewBlockTemplateNotification *NewBlockTemplateNotificationMessage `protobuf:"bytes,1083,opt,name=newBlockTemplateNotification,proto3,oneof"`
}

type KaspadResponse_GetMempoolEntriesByAddressesResponse struct {
	GetMempoolEntriesByAddressesResponse *GetMempoolEntriesByAddressesResponseMessage `protobuf:"bytes,1085,opt,name=getMempoolEntriesByAddressesResponse,proto3,oneof"`
}

type KaspadResponse_GetCoinSupplyResponse struct {
	GetCoinSupplyResponse *GetCoinSupplyResponseMessage `protobuf:"bytes,1087,opt,name=getCoinSupplyResponse,proto3,oneof"`
}

type KaspadResponse_PingResponse struct {
	PingResponse *PingResponseMessage `protobuf:"bytes,1089,opt,name=pingResponse,proto3,oneof"`
}

type KaspadResponse_GetMetricsResponse struct {
	GetMetricsResponse *GetMetricsResponseMessage `protobuf:"bytes,1091,opt,name=getMetricsResponse,proto3,oneof"`
}

type KaspadResponse_GetServerInfoResponse struct {
	GetServerInfoResponse *GetServerInfoResponseMessage `protobuf:"bytes,1093,opt,name=getServerInfoResponse,proto3,oneof"`
}

type KaspadResponse_GetSyncStatusResponse struct {
	GetSyncStatusResponse *GetSyncStatusResponseMessage `protobuf:"bytes,1095,opt,name=getSyncStatusResponse,proto3,oneof"`
}

type KaspadResponse_GetDaaScoreTimestampEstimateResponse struct {
	GetDaaScoreTimestampEstimateResponse *GetDaaScoreTimestampEstimateResponseMessage `protobuf:"bytes,1097,opt,name=getDaaScoreTimestampEstimateResponse,proto3,oneof"`
}

type KaspadResponse_SubmitTransactionReplacementResponse struct {
	SubmitTransactionReplacementResponse *SubmitTransactionReplacementResponseMessage `protobuf:"bytes,1101,opt,name=submitTransactionReplacementResponse,proto3,oneof"`
}

type KaspadResponse_GetConnectionsResponse struct {
	GetConnectionsResponse *GetConnectionsResponseMessage `protobuf:"bytes,1103,opt,name=getConnectionsResponse,proto3,oneof"`
}

type KaspadResponse_GetSystemInfoResponse struct {
	GetSystemInfoResponse *GetSystemInfoResponseMessage `protobuf:"bytes,1105,opt,name=getSystemInfoResponse,proto3,oneof"`
}

type KaspadResponse_GetFeeEstimateResponse struct {
	GetFeeEstimateResponse *GetFeeEstimateResponseMessage `protobuf:"bytes,1107,opt,name=getFeeEstimateResponse,proto3,oneof"`
}

type KaspadResponse_GetFeeEstimateExperimentalResponse struct {
	GetFeeEstimateExperimentalResponse *GetFeeEstimateExperimentalResponseMessage `protobuf:"bytes,1109,opt,name=getFeeEstimateExperimentalResponse,proto3,oneof"`
}

type KaspadResponse_GetCurrentBlockColorResponse struct {
	GetCurrentBlockColorResponse *GetCurrentBlockColorResponseMessage `protobuf:"bytes,1111,opt,name=getCurrentBlockColorResponse,proto3,oneof"`
}

type KaspadResponse_GetUtxoReturnAddressResponse struct {
	GetUtxoReturnAddressResponse *GetUtxoReturnAddressResponseMessage `protobuf:"bytes,1113,opt,name=GetUtxoReturnAddressResponse,proto3,oneof"`
}

func (*KaspadResponse_GetCurrentNetworkResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_SubmitBlockResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBlockTemplateResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyBlockAddedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_BlockAddedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetPeerAddressesResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetSinkResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetMempoolEntryResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetConnectedPeerInfoResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_AddPeerResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_SubmitTransactionResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyVirtualChainChangedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_VirtualChainChangedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBlockResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetSubnetworkResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetVirtualChainFromBlockResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBlocksResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBlockCountResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBlockDagInfoResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_ResolveFinalityConflictResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyFinalityConflictResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_FinalityConflictNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_FinalityConflictResolvedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetMempoolEntriesResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_ShutdownResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetHeadersResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyUtxosChangedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_UtxosChangedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetUtxosByAddressesResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetSinkBlueScoreResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifySinkBlueScoreChangedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_SinkBlueScoreChangedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_BanResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_UnbanResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetInfoResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_StopNotifyingUtxosChangedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyPruningPointUtxoSetOverrideResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_PruningPointUtxoSetOverrideNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_StopNotifyingPruningPointUtxoSetOverrideResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_EstimateNetworkHashesPerSecondResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyVirtualDaaScoreChangedResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_VirtualDaaScoreChangedNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBalanceByAddressResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetBalancesByAddressesResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NotifyNewBlockTemplateResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_NewBlockTemplateNotification) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetMempoolEntriesByAddressesResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetCoinSupplyResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_PingResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetMetricsResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetServerInfoResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetSyncStatusResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetDaaScoreTimestampEstimateResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_SubmitTransactionReplacementResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetConnectionsResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetSystemInfoResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetFeeEstimateResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetFeeEstimateExperimentalResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetCurrentBlockColorResponse) isKaspadResponse_Payload() {}

func (*KaspadResponse_GetUtxoReturnAddressResponse) isKaspadResponse_Payload() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x1a, 0x09, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x2b, 0x0a, 0x0d, 0x4b, 0x61, 0x73, 0x70, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xef,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x63, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xfa, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x83, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x85, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x1f, 0x67, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x89, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x8b, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x8d, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x8f, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x93,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x0f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x95, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x97, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x99, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6f, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x9c, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x9e, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0xa0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c,
	0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x21,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0xa3, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xa5, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x62,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xa7, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xa9, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x28, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xab, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x28, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xae, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x25, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xb0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x25, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x23, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x61, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xb2, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x23, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb5, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb7, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x78, 0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0xb9, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a,
	0x23, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xbc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xbe, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xc2, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc4, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc6, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x23, 0x67, 0x65, 0x74, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x67, 0x65, 0x74, 0x44, 0x61, 0x61,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01,
	0x0a, 0x23, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x23, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xd0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x15, 0x67,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xd2, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01,
	0x0a, 0x21, 0x67, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0xd4, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x21, 0x67, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0xd6, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55,
	0x74, 0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x1b, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xcf, 0x35, 0x0a, 0x0e, 0x4b, 0x61, 0x73, 0x70,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf0, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x69, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf3, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf5, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xfb, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xff, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x21, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x1f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x86, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x67, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x88, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x15, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8a, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8c, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x1f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8e, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x90, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x24,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x24, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x19, 0x67,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x94, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x96, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x98, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x9a, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x18, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x9b, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x72, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x9d, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x9f, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x42,
	0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x22, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x42,
	0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xa1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x22, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69,
	0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x73,
	0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xa2, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x20, 0x73, 0x69,
	0x6e, 0x6b, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xa4, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xa6, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x6e, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xa8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x21, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0xaa, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x21, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x55,
	0x74, 0x78, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x29, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0xac, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x29, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53,
	0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x27, 0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xad,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x27, 0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x30,
	0x73, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0xaf, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x53, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x30, 0x73,
	0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x65, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x26, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb1, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x26, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb3,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x24, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x22, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb4, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x22, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x72, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb6,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb8, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x1e, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0xba, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x1c, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbb, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbd, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x24,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbf, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xc1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xc3, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xc5, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0xc7, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xc9, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x24, 0x67, 0x65, 0x74, 0x44, 0x61, 0x61, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x24, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0xcf, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd3, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x67, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd5, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x22, 0x67, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0xd7, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd9, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x51, 0x0a, 0x03, 0x52, 0x50, 0x43,
	0x12, 0x4a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4b, 0x61,
	0x73, 0x70, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4b, 0x61, 0x73, 0x70, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_proto_goTypes = []interface{}{
	(*KaspadRequest)(nil),                                           // 0: protowire.KaspadRequest
	(*KaspadResponse)(nil),                                          // 1: protowire.KaspadResponse
	(*GetCurrentNetworkRequestMessage)(nil),                         // 2: protowire.GetCurrentNetworkRequestMessage
	(*SubmitBlockRequestMessage)(nil),                               // 3: protowire.SubmitBlockRequestMessage
	(*GetBlockTemplateRequestMessage)(nil),                          // 4: protowire.GetBlockTemplateRequestMessage
	(*NotifyBlockAddedRequestMessage)(nil),                          // 5: protowire.NotifyBlockAddedRequestMessage
	(*GetPeerAddressesRequestMessage)(nil),                          // 6: protowire.GetPeerAddressesRequestMessage
	(*GetSinkRequestMessage)(nil),                                   // 7: protowire.GetSinkRequestMessage
	(*GetMempoolEntryRequestMessage)(nil),                           // 8: protowire.GetMempoolEntryRequestMessage
	(*GetConnectedPeerInfoRequestMessage)(nil),                      // 9: protowire.GetConnectedPeerInfoRequestMessage
	(*AddPeerRequestMessage)(nil),                                   // 10: protowire.AddPeerRequestMessage
	(*SubmitTransactionRequestMessage)(nil),                         // 11: protowire.SubmitTransactionRequestMessage
	(*NotifyVirtualChainChangedRequestMessage)(nil),                 // 12: protowire.NotifyVirtualChainChangedRequestMessage
	(*GetBlockRequestMessage)(nil),                                  // 13: protowire.GetBlockRequestMessage
	(*GetSubnetworkRequestMessage)(nil),                             // 14: protowire.GetSubnetworkRequestMessage
	(*GetVirtualChainFromBlockRequestMessage)(nil),                  // 15: protowire.GetVirtualChainFromBlockRequestMessage
	(*GetBlocksRequestMessage)(nil),                                 // 16: protowire.GetBlocksRequestMessage
	(*GetBlockCountRequestMessage)(nil),                             // 17: protowire.GetBlockCountRequestMessage
	(*GetBlockDagInfoRequestMessage)(nil),                           // 18: protowire.GetBlockDagInfoRequestMessage
	(*ResolveFinalityConflictRequestMessage)(nil),                   // 19: protowire.ResolveFinalityConflictRequestMessage
	(*NotifyFinalityConflictRequestMessage)(nil),                    // 20: protowire.NotifyFinalityConflictRequestMessage
	(*GetMempoolEntriesRequestMessage)(nil),                         // 21: protowire.GetMempoolEntriesRequestMessage
	(*ShutdownRequestMessage)(nil),                                  // 22: protowire.ShutdownRequestMessage
	(*GetHeadersRequestMessage)(nil),                                // 23: protowire.GetHeadersRequestMessage
	(*NotifyUtxosChangedRequestMessage)(nil),                        // 24: protowire.NotifyUtxosChangedRequestMessage
	(*GetUtxosByAddressesRequestMessage)(nil),                       // 25: protowire.GetUtxosByAddressesRequestMessage
	(*GetSinkBlueScoreRequestMessage)(nil),                          // 26: protowire.GetSinkBlueScoreRequestMessage
	(*NotifySinkBlueScoreChangedRequestMessage)(nil),                // 27: protowire.NotifySinkBlueScoreChangedRequestMessage
	(*BanRequestMessage)(nil),                                       // 28: protowire.BanRequestMessage
	(*UnbanRequestMessage)(nil),                                     // 29: protowire.UnbanRequestMessage
	(*GetInfoRequestMessage)(nil),                                   // 30: protowire.GetInfoRequestMessage
	(*StopNotifyingUtxosChangedRequestMessage)(nil),                 // 31: protowire.StopNotifyingUtxosChangedRequestMessage
	(*NotifyPruningPointUtxoSetOverrideRequestMessage)(nil),         // 32: protowire.NotifyPruningPointUtxoSetOverrideRequestMessage
	(*StopNotifyingPruningPointUtxoSetOverrideRequestMessage)(nil),  // 33: protowire.StopNotifyingPruningPointUtxoSetOverrideRequestMessage
	(*EstimateNetworkHashesPerSecondRequestMessage)(nil),            // 34: protowire.EstimateNetworkHashesPerSecondRequestMessage
	(*NotifyVirtualDaaScoreChangedRequestMessage)(nil),              // 35: protowire.NotifyVirtualDaaScoreChangedRequestMessage
	(*GetBalanceByAddressRequestMessage)(nil),                       // 36: protowire.GetBalanceByAddressRequestMessage
	(*GetBalancesByAddressesRequestMessage)(nil),                    // 37: protowire.GetBalancesByAddressesRequestMessage
	(*NotifyNewBlockTemplateRequestMessage)(nil),                    // 38: protowire.NotifyNewBlockTemplateRequestMessage
	(*GetMempoolEntriesByAddressesRequestMessage)(nil),              // 39: protowire.GetMempoolEntriesByAddressesRequestMessage
	(*GetCoinSupplyRequestMessage)(nil),                             // 40: protowire.GetCoinSupplyRequestMessage
	(*PingRequestMessage)(nil),                                      // 41: protowire.PingRequestMessage
	(*GetMetricsRequestMessage)(nil),                                // 42: protowire.GetMetricsRequestMessage
	(*GetServerInfoRequestMessage)(nil),                             // 43: protowire.GetServerInfoRequestMessage
	(*GetSyncStatusRequestMessage)(nil),                             // 44: protowire.GetSyncStatusRequestMessage
	(*GetDaaScoreTimestampEstimateRequestMessage)(nil),              // 45: protowire.GetDaaScoreTimestampEstimateRequestMessage
	(*SubmitTransactionReplacementRequestMessage)(nil),              // 46: protowire.SubmitTransactionReplacementRequestMessage
	(*GetConnectionsRequestMessage)(nil),                            // 47: protowire.GetConnectionsRequestMessage
	(*GetSystemInfoRequestMessage)(nil),                             // 48: protowire.GetSystemInfoRequestMessage
	(*GetFeeEstimateRequestMessage)(nil),                            // 49: protowire.GetFeeEstimateRequestMessage
	(*GetFeeEstimateExperimentalRequestMessage)(nil),                // 50: protowire.GetFeeEstimateExperimentalRequestMessage
	(*GetCurrentBlockColorRequestMessage)(nil),                      // 51: protowire.GetCurrentBlockColorRequestMessage
	(*GetUtxoReturnAddressRequestMessage)(nil),                      // 52: protowire.GetUtxoReturnAddressRequestMessage
	(*GetCurrentNetworkResponseMessage)(nil),                        // 53: protowire.GetCurrentNetworkResponseMessage
	(*SubmitBlockResponseMessage)(nil),                              // 54: protowire.SubmitBlockResponseMessage
	(*GetBlockTemplateResponseMessage)(nil),                         // 55: protowire.GetBlockTemplateResponseMessage
	(*NotifyBlockAddedResponseMessage)(nil),                         // 56: protowire.NotifyBlockAddedResponseMessage
	(*BlockAddedNotificationMessage)(nil),                           // 57: protowire.BlockAddedNotificationMessage
	(*GetPeerAddressesResponseMessage)(nil),                         // 58: protowire.GetPeerAddressesResponseMessage
	(*GetSinkResponseMessage)(nil),                                  // 59: protowire.GetSinkResponseMessage
	(*GetMempoolEntryResponseMessage)(nil),                          // 60: protowire.GetMempoolEntryResponseMessage
	(*GetConnectedPeerInfoResponseMessage)(nil),                     // 61: protowire.GetConnectedPeerInfoResponseMessage
	(*AddPeerResponseMessage)(nil),                                  // 62: protowire.AddPeerResponseMessage
	(*SubmitTransactionResponseMessage)(nil),                        // 63: protowire.SubmitTransactionResponseMessage
	(*NotifyVirtualChainChangedResponseMessage)(nil),                // 64: protowire.NotifyVirtualChainChangedResponseMessage
	(*VirtualChainChangedNotificationMessage)(nil),                  // 65: protowire.VirtualChainChangedNotificationMessage
	(*GetBlockResponseMessage)(nil),                                 // 66: protowire.GetBlockResponseMessage
	(*GetSubnetworkResponseMessage)(nil),                            // 67: protowire.GetSubnetworkResponseMessage
	(*GetVirtualChainFromBlockResponseMessage)(nil),                 // 68: protowire.GetVirtualChainFromBlockResponseMessage
	(*GetBlocksResponseMessage)(nil),                                // 69: protowire.GetBlocksResponseMessage
	(*GetBlockCountResponseMessage)(nil),                            // 70: protowire.GetBlockCountResponseMessage
	(*GetBlockDagInfoResponseMessage)(nil),                          // 71: protowire.GetBlockDagInfoResponseMessage
	(*ResolveFinalityConflictResponseMessage)(nil),                  // 72: protowire.ResolveFinalityConflictResponseMessage
	(*NotifyFinalityConflictResponseMessage)(nil),                   // 73: protowire.NotifyFinalityConflictResponseMessage
	(*FinalityConflictNotificationMessage)(nil),                     // 74: protowire.FinalityConflictNotificationMessage
	(*FinalityConflictResolvedNotificationMessage)(nil),             // 75: protowire.FinalityConflictResolvedNotificationMessage
	(*GetMempoolEntriesResponseMessage)(nil),                        // 76: protowire.GetMempoolEntriesResponseMessage
	(*ShutdownResponseMessage)(nil),                                 // 77: protowire.ShutdownResponseMessage
	(*GetHeadersResponseMessage)(nil),                               // 78: protowire.GetHeadersResponseMessage
	(*NotifyUtxosChangedResponseMessage)(nil),                       // 79: protowire.NotifyUtxosChangedResponseMessage
	(*UtxosChangedNotificationMessage)(nil),                         // 80: protowire.UtxosChangedNotificationMessage
	(*GetUtxosByAddressesResponseMessage)(nil),                      // 81: protowire.GetUtxosByAddressesResponseMessage
	(*GetSinkBlueScoreResponseMessage)(nil),                         // 82: protowire.GetSinkBlueScoreResponseMessage
	(*NotifySinkBlueScoreChangedResponseMessage)(nil),               // 83: protowire.NotifySinkBlueScoreChangedResponseMessage
	(*SinkBlueScoreChangedNotificationMessage)(nil),                 // 84: protowire.SinkBlueScoreChangedNotificationMessage
	(*BanResponseMessage)(nil),                                      // 85: protowire.BanResponseMessage
	(*UnbanResponseMessage)(nil),                                    // 86: protowire.UnbanResponseMessage
	(*GetInfoResponseMessage)(nil),                                  // 87: protowire.GetInfoResponseMessage
	(*StopNotifyingUtxosChangedResponseMessage)(nil),                // 88: protowire.StopNotifyingUtxosChangedResponseMessage
	(*NotifyPruningPointUtxoSetOverrideResponseMessage)(nil),        // 89: protowire.NotifyPruningPointUtxoSetOverrideResponseMessage
	(*PruningPointUtxoSetOverrideNotificationMessage)(nil),          // 90: protowire.PruningPointUtxoSetOverrideNotificationMessage
	(*StopNotifyingPruningPointUtxoSetOverrideResponseMessage)(nil), // 91: protowire.StopNotifyingPruningPointUtxoSetOverrideResponseMessage
	(*EstimateNetworkHashesPerSecondResponseMessage)(nil),           // 92: protowire.EstimateNetworkHashesPerSecondResponseMessage
	(*NotifyVirtualDaaScoreChangedResponseMessage)(nil),             // 93: protowire.NotifyVirtualDaaScoreChangedResponseMessage
	(*VirtualDaaScoreChangedNotificationMessage)(nil),               // 94: protowire.VirtualDaaScoreChangedNotificationMessage
	(*GetBalanceByAddressResponseMessage)(nil),                      // 95: protowire.GetBalanceByAddressResponseMessage
	(*GetBalancesByAddressesResponseMessage)(nil),                   // 96: protowire.GetBalancesByAddressesResponseMessage
	(*NotifyNewBlockTemplateResponseMessage)(nil),                   // 97: protowire.NotifyNewBlockTemplateResponseMessage
	(*NewBlockTemplateNotificationMessage)(nil),                     // 98: protowire.NewBlockTemplateNotificationMessage
	(*GetMempoolEntriesByAddressesResponseMessage)(nil),             // 99: protowire.GetMempoolEntriesByAddressesResponseMessage
	(*GetCoinSupplyResponseMessage)(nil),                            // 100: protowire.GetCoinSupplyResponseMessage
	(*PingResponseMessage)(nil),                                     // 101: protowire.PingResponseMessage
	(*GetMetricsResponseMessage)(nil),                               // 102: protowire.GetMetricsResponseMessage
	(*GetServerInfoResponseMessage)(nil),                            // 103: protowire.GetServerInfoResponseMessage
	(*GetSyncStatusResponseMessage)(nil),                            // 104: protowire.GetSyncStatusResponseMessage
	(*GetDaaScoreTimestampEstimateResponseMessage)(nil),             // 105: protowire.GetDaaScoreTimestampEstimateResponseMessage
	(*SubmitTransactionReplacementResponseMessage)(nil),             // 106: protowire.SubmitTransactionReplacementResponseMessage
	(*GetConnectionsResponseMessage)(nil),                           // 107: protowire.GetConnectionsResponseMessage
	(*GetSystemInfoResponseMessage)(nil),                            // 108: protowire.GetSystemInfoResponseMessage
	(*GetFeeEstimateResponseMessage)(nil),                           // 109: protowire.GetFeeEstimateResponseMessage
	(*GetFeeEstimateExperimentalResponseMessage)(nil),               // 110: protowire.GetFeeEstimateExperimentalResponseMessage
	(*GetCurrentBlockColorResponseMessage)(nil),                     // 111: protowire.GetCurrentBlockColorResponseMessage
	(*GetUtxoReturnAddressResponseMessage)(nil),                     // 112: protowire.GetUtxoReturnAddressResponseMessage
}
var file_message_proto_depIdxs = []int32{
	2,   // 0: protowire.KaspadRequest.getCurrentNetworkRequest:type_name -> protowire.GetCurrentNetworkRequestMessage
	3,   // 1: protowire.KaspadRequest.submitBlockRequest:type_name -> protowire.SubmitBlockRequestMessage
	4,   // 2: protowire.KaspadRequest.getBlockTemplateRequest:type_name -> protowire.GetBlockTemplateRequestMessage
	5,   // 3: protowire.KaspadRequest.notifyBlockAddedRequest:type_name -> protowire.NotifyBlockAddedRequestMessage
	6,   // 4: protowire.KaspadRequest.getPeerAddressesRequest:type_name -> protowire.GetPeerAddressesRequestMessage
	7,   // 5: protowire.KaspadRequest.GetSinkRequest:type_name -> protowire.GetSinkRequestMessage
	8,   // 6: protowire.KaspadRequest.getMempoolEntryRequest:type_name -> protowire.GetMempoolEntryRequestMessage
	9,   // 7: protowire.KaspadRequest.getConnectedPeerInfoRequest:type_name -> protowire.GetConnectedPeerInfoRequestMessage
	10,  // 8: protowire.KaspadRequest.addPeerRequest:type_name -> protowire.AddPeerRequestMessage
	11,  // 9: protowire.KaspadRequest.submitTransactionRequest:type_name -> protowire.SubmitTransactionRequestMessage
	12,  // 10: protowire.KaspadRequest.notifyVirtualChainChangedRequest:type_name -> protowire.NotifyVirtualChainChangedRequestMessage
	13,  // 11: protowire.KaspadRequest.getBlockRequest:type_name -> protowire.GetBlockRequestMessage
	14,  // 12: protowire.KaspadRequest.getSubnetworkRequest:type_name -> protowire.GetSubnetworkRequestMessage
	15,  // 13: protowire.KaspadRequest.getVirtualChainFromBlockRequest:type_name -> protowire.GetVirtualChainFromBlockRequestMessage
	16,  // 14: protowire.KaspadRequest.getBlocksRequest:type_name -> protowire.GetBlocksRequestMessage
	17,  // 15: protowire.KaspadRequest.getBlockCountRequest:type_name -> protowire.GetBlockCountRequestMessage
	18,  // 16: protowire.KaspadRequest.getBlockDagInfoRequest:type_name -> protowire.GetBlockDagInfoRequestMessage
	19,  // 17: protowire.KaspadRequest.resolveFinalityConflictRequest:type_name -> protowire.ResolveFinalityConflictRequestMessage
	20,  // 18: protowire.KaspadRequest.notifyFinalityConflictRequest:type_name -> protowire.NotifyFinalityConflictRequestMessage
	21,  // 19: protowire.KaspadRequest.getMempoolEntriesRequest:type_name -> protowire.GetMempoolEntriesRequestMessage
	22,  // 20: protowire.KaspadRequest.shutdownRequest:type_name -> protowire.ShutdownRequestMessage
	23,  // 21: protowire.KaspadRequest.getHeadersRequest:type_name -> protowire.GetHeadersRequestMessage
	24,  // 22: protowire.KaspadRequest.notifyUtxosChangedRequest:type_name -> protowire.NotifyUtxosChangedRequestMessage
	25,  // 23: protowire.KaspadRequest.getUtxosByAddressesRequest:type_name -> protowire.GetUtxosByAddressesRequestMessage
	26,  // 24: protowire.KaspadRequest.getSinkBlueScoreRequest:type_name -> protowire.GetSinkBlueScoreRequestMessage
	27,  // 25: protowire.KaspadRequest.notifySinkBlueScoreChangedRequest:type_name -> protowire.NotifySinkBlueScoreChangedRequestMessage
	28,  // 26: protowire.KaspadRequest.banRequest:type_name -> protowire.BanRequestMessage
	29,  // 27: protowire.KaspadRequest.unbanRequest:type_name -> protowire.UnbanRequestMessage
	30,  // 28: protowire.KaspadRequest.getInfoRequest:type_name -> protowire.GetInfoRequestMessage
	31,  // 29: protowire.KaspadRequest.stopNotifyingUtxosChangedRequest:type_name -> protowire.StopNotifyingUtxosChangedRequestMessage
	32,  // 30: protowire.KaspadRequest.notifyPruningPointUtxoSetOverrideRequest:type_name -> protowire.NotifyPruningPointUtxoSetOverrideRequestMessage
	33,  // 31: protowire.KaspadRequest.stopNotifyingPruningPointUtxoSetOverrideRequest:type_name -> protowire.StopNotifyingPruningPointUtxoSetOverrideRequestMessage
	34,  // 32: protowire.KaspadRequest.estimateNetworkHashesPerSecondRequest:type_name -> protowire.EstimateNetworkHashesPerSecondRequestMessage
	35,  // 33: protowire.KaspadRequest.notifyVirtualDaaScoreChangedRequest:type_name -> protowire.NotifyVirtualDaaScoreChangedRequestMessage
	36,  // 34: protowire.KaspadRequest.getBalanceByAddressRequest:type_name -> protowire.GetBalanceByAddressRequestMessage
	37,  // 35: protowire.KaspadRequest.getBalancesByAddressesRequest:type_name -> protowire.GetBalancesByAddressesRequestMessage
	38,  // 36: protowire.KaspadRequest.notifyNewBlockTemplateRequest:type_name -> protowire.NotifyNewBlockTemplateRequestMessage
	39,  // 37: protowire.KaspadRequest.getMempoolEntriesByAddressesRequest:type_name -> protowire.GetMempoolEntriesByAddressesRequestMessage
	40,  // 38: protowire.KaspadRequest.getCoinSupplyRequest:type_name -> protowire.GetCoinSupplyRequestMessage
	41,  // 39: protowire.KaspadRequest.pingRequest:type_name -> protowire.PingRequestMessage
	42,  // 40: protowire.KaspadRequest.getMetricsRequest:type_name -> protowire.GetMetricsRequestMessage
	43,  // 41: protowire.KaspadRequest.getServerInfoRequest:type_name -> protowire.GetServerInfoRequestMessage
	44,  // 42: protowire.KaspadRequest.getSyncStatusRequest:type_name -> protowire.GetSyncStatusRequestMessage
	45,  // 43: protowire.KaspadRequest.getDaaScoreTimestampEstimateRequest:type_name -> protowire.GetDaaScoreTimestampEstimateRequestMessage
	46,  // 44: protowire.KaspadRequest.submitTransactionReplacementRequest:type_name -> protowire.SubmitTransactionReplacementRequestMessage
	47,  // 45: protowire.KaspadRequest.getConnectionsRequest:type_name -> protowire.GetConnectionsRequestMessage
	48,  // 46: protowire.KaspadRequest.getSystemInfoRequest:type_name -> protowire.GetSystemInfoRequestMessage
	49,  // 47: protowire.KaspadRequest.getFeeEstimateRequest:type_name -> protowire.GetFeeEstimateRequestMessage
	50,  // 48: protowire.KaspadRequest.getFeeEstimateExperimentalRequest:type_name -> protowire.GetFeeEstimateExperimentalRequestMessage
	51,  // 49: protowire.KaspadRequest.getCurrentBlockColorRequest:type_name -> protowire.GetCurrentBlockColorRequestMessage
	52,  // 50: protowire.KaspadRequest.GetUtxoReturnAddressRequest:type_name -> protowire.GetUtxoReturnAddressRequestMessage
	53,  // 51: protowire.KaspadResponse.getCurrentNetworkResponse:type_name -> protowire.GetCurrentNetworkResponseMessage
	54,  // 52: protowire.KaspadResponse.submitBlockResponse:type_name -> protowire.SubmitBlockResponseMessage
	55,  // 53: protowire.KaspadResponse.getBlockTemplateResponse:type_name -> protowire.GetBlockTemplateResponseMessage
	56,  // 54: protowire.KaspadResponse.notifyBlockAddedResponse:type_name -> protowire.NotifyBlockAddedResponseMessage
	57,  // 55: protowire.KaspadResponse.blockAddedNotification:type_name -> protowire.BlockAddedNotificationMessage
	58,  // 56: protowire.KaspadResponse.getPeerAddressesResponse:type_name -> protowire.GetPeerAddressesResponseMessage
	59,  // 57: protowire.KaspadResponse.GetSinkResponse:type_name -> protowire.GetSinkResponseMessage
	60,  // 58: protowire.KaspadResponse.getMempoolEntryResponse:type_name -> protowire.GetMempoolEntryResponseMessage
	61,  // 59: protowire.KaspadResponse.getConnectedPeerInfoResponse:type_name -> protowire.GetConnectedPeerInfoResponseMessage
	62,  // 60: protowire.KaspadResponse.addPeerResponse:type_name -> protowire.AddPeerResponseMessage
	63,  // 61: protowire.KaspadResponse.submitTransactionResponse:type_name -> protowire.SubmitTransactionResponseMessage
	64,  // 62: protowire.KaspadResponse.notifyVirtualChainChangedResponse:type_name -> protowire.NotifyVirtualChainChangedResponseMessage
	65,  // 63: protowire.KaspadResponse.virtualChainChangedNotification:type_name -> protowire.VirtualChainChangedNotificationMessage
	66,  // 64: protowire.KaspadResponse.getBlockResponse:type_name -> protowire.GetBlockResponseMessage
	67,  // 65: protowire.KaspadResponse.getSubnetworkResponse:type_name -> protowire.GetSubnetworkResponseMessage
	68,  // 66: protowire.KaspadResponse.getVirtualChainFromBlockResponse:type_name -> protowire.GetVirtualChainFromBlockResponseMessage
	69,  // 67: protowire.KaspadResponse.getBlocksResponse:type_name -> protowire.GetBlocksResponseMessage
	70,  // 68: protowire.KaspadResponse.getBlockCountResponse:type_name -> protowire.GetBlockCountResponseMessage
	71,  // 69: protowire.KaspadResponse.getBlockDagInfoResponse:type_name -> protowire.GetBlockDagInfoResponseMessage
	72,  // 70: protowire.KaspadResponse.resolveFinalityConflictResponse:type_name -> protowire.ResolveFinalityConflictResponseMessage
	73,  // 71: protowire.KaspadResponse.notifyFinalityConflictResponse:type_name -> protowire.NotifyFinalityConflictResponseMessage
	74,  // 72: protowire.KaspadResponse.finalityConflictNotification:type_name -> protowire.FinalityConflictNotificationMessage
	75,  // 73: protowire.KaspadResponse.finalityConflictResolvedNotification:type_name -> protowire.FinalityConflictResolvedNotificationMessage
	76,  // 74: protowire.KaspadResponse.getMempoolEntriesResponse:type_name -> protowire.GetMempoolEntriesResponseMessage
	77,  // 75: protowire.KaspadResponse.shutdownResponse:type_name -> protowire.ShutdownResponseMessage
	78,  // 76: protowire.KaspadResponse.getHeadersResponse:type_name -> protowire.GetHeadersResponseMessage
	79,  // 77: protowire.KaspadResponse.notifyUtxosChangedResponse:type_name -> protowire.NotifyUtxosChangedResponseMessage
	80,  // 78: protowire.KaspadResponse.utxosChangedNotification:type_name -> protowire.UtxosChangedNotificationMessage
	81,  // 79: protowire.KaspadResponse.getUtxosByAddressesResponse:type_name -> protowire.GetUtxosByAddressesResponseMessage
	82,  // 80: protowire.KaspadResponse.getSinkBlueScoreResponse:type_name -> protowire.GetSinkBlueScoreResponseMessage
	83,  // 81: protowire.KaspadResponse.notifySinkBlueScoreChangedResponse:type_name -> protowire.NotifySinkBlueScoreChangedResponseMessage
	84,  // 82: protowire.KaspadResponse.sinkBlueScoreChangedNotification:type_name -> protowire.SinkBlueScoreChangedNotificationMessage
	85,  // 83: protowire.KaspadResponse.banResponse:type_name -> protowire.BanResponseMessage
	86,  // 84: protowire.KaspadResponse.unbanResponse:type_name -> protowire.UnbanResponseMessage
	87,  // 85: protowire.KaspadResponse.getInfoResponse:type_name -> protowire.GetInfoResponseMessage
	88,  // 86: protowire.KaspadResponse.stopNotifyingUtxosChangedResponse:type_name -> protowire.StopNotifyingUtxosChangedResponseMessage
	89,  // 87: protowire.KaspadResponse.notifyPruningPointUtxoSetOverrideResponse:type_name -> protowire.NotifyPruningPointUtxoSetOverrideResponseMessage
	90,  // 88: protowire.KaspadResponse.pruningPointUtxoSetOverrideNotification:type_name -> protowire.PruningPointUtxoSetOverrideNotificationMessage
	91,  // 89: protowire.KaspadResponse.stopNotifyingPruningPointUtxoSetOverrideResponse:type_name -> protowire.StopNotifyingPruningPointUtxoSetOverrideResponseMessage
	92,  // 90: protowire.KaspadResponse.estimateNetworkHashesPerSecondResponse:type_name -> protowire.EstimateNetworkHashesPerSecondResponseMessage
	93,  // 91: protowire.KaspadResponse.notifyVirtualDaaScoreChangedResponse:type_name -> protowire.NotifyVirtualDaaScoreChangedResponseMessage
	94,  // 92: protowire.KaspadResponse.virtualDaaScoreChangedNotification:type_name -> protowire.VirtualDaaScoreChangedNotificationMessage
	95,  // 93: protowire.KaspadResponse.getBalanceByAddressResponse:type_name -> protowire.GetBalanceByAddressResponseMessage
	96,  // 94: protowire.KaspadResponse.getBalancesByAddressesResponse:type_name -> protowire.GetBalancesByAddressesResponseMessage
	97,  // 95: protowire.KaspadResponse.notifyNewBlockTemplateResponse:type_name -> protowire.NotifyNewBlockTemplateResponseMessage
	98,  // 96: protowire.KaspadResponse.newBlockTemplateNotification:type_name -> protowire.NewBlockTemplateNotificationMessage
	99,  // 97: protowire.KaspadResponse.getMempoolEntriesByAddressesResponse:type_name -> protowire.GetMempoolEntriesByAddressesResponseMessage
	100, // 98: protowire.KaspadResponse.getCoinSupplyResponse:type_name -> protowire.GetCoinSupplyResponseMessage
	101, // 99: protowire.KaspadResponse.pingResponse:type_name -> protowire.PingResponseMessage
	102, // 100: protowire.KaspadResponse.getMetricsResponse:type_name -> protowire.GetMetricsResponseMessage
	103, // 101: protowire.KaspadResponse.getServerInfoResponse:type_name -> protowire.GetServerInfoResponseMessage
	104, // 102: protowire.KaspadResponse.getSyncStatusResponse:type_name -> protowire.GetSyncStatusResponseMessage
	105, // 103: protowire.KaspadResponse.getDaaScoreTimestampEstimateResponse:type_name -> protowire.GetDaaScoreTimestampEstimateResponseMessage
	106, // 104: protowire.KaspadResponse.submitTransactionReplacementResponse:type_name -> protowire.SubmitTransactionReplacementResponseMessage
	107, // 105: protowire.KaspadResponse.getConnectionsResponse:type_name -> protowire.GetConnectionsResponseMessage
	108, // 106: protowire.KaspadResponse.getSystemInfoResponse:type_name -> protowire.GetSystemInfoResponseMessage
	109, // 107: protowire.KaspadResponse.getFeeEstimateResponse:type_name -> protowire.GetFeeEstimateResponseMessage
	110, // 108: protowire.KaspadResponse.getFeeEstimateExperimentalResponse:type_name -> protowire.GetFeeEstimateExperimentalResponseMessage
	111, // 109: protowire.KaspadResponse.getCurrentBlockColorResponse:type_name -> protowire.GetCurrentBlockColorResponseMessage
	112, // 110: protowire.KaspadResponse.GetUtxoReturnAddressResponse:type_name -> protowire.GetUtxoReturnAddressResponseMessage
	0,   // 111: protowire.RPC.MessageStream:input_type -> protowire.KaspadRequest
	1,   // 112: protowire.RPC.MessageStream:output_type -> protowire.KaspadResponse
	112, // [112:113] is the sub-list for method output_type
	111, // [111:112] is the sub-list for method input_type
	111, // [111:111] is the sub-list for extension type_name
	111, // [111:111] is the sub-list for extension extendee
	0,   // [0:111] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_rpc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KaspadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KaspadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*KaspadRequest_GetCurrentNetworkRequest)(nil),
		(*KaspadRequest_SubmitBlockRequest)(nil),
		(*KaspadRequest_GetBlockTemplateRequest)(nil),
		(*KaspadRequest_NotifyBlockAddedRequest)(nil),
		(*KaspadRequest_GetPeerAddressesRequest)(nil),
		(*KaspadRequest_GetSinkRequest)(nil),
		(*KaspadRequest_GetMempoolEntryRequest)(nil),
		(*KaspadRequest_GetConnectedPeerInfoRequest)(nil),
		(*KaspadRequest_AddPeerRequest)(nil),
		(*KaspadRequest_SubmitTransactionRequest)(nil),
		(*KaspadRequest_NotifyVirtualChainChangedRequest)(nil),
		(*KaspadRequest_GetBlockRequest)(nil),
		(*KaspadRequest_GetSubnetworkRequest)(nil),
		(*KaspadRequest_GetVirtualChainFromBlockRequest)(nil),
		(*KaspadRequest_GetBlocksRequest)(nil),
		(*KaspadRequest_GetBlockCountRequest)(nil),
		(*KaspadRequest_GetBlockDagInfoRequest)(nil),
		(*KaspadRequest_ResolveFinalityConflictRequest)(nil),
		(*KaspadRequest_NotifyFinalityConflictRequest)(nil),
		(*KaspadRequest_GetMempoolEntriesRequest)(nil),
		(*KaspadRequest_ShutdownRequest)(nil),
		(*KaspadRequest_GetHeadersRequest)(nil),
		(*KaspadRequest_NotifyUtxosChangedRequest)(nil),
		(*KaspadRequest_GetUtxosByAddressesRequest)(nil),
		(*KaspadRequest_GetSinkBlueScoreRequest)(nil),
		(*KaspadRequest_NotifySinkBlueScoreChangedRequest)(nil),
		(*KaspadRequest_BanRequest)(nil),
		(*KaspadRequest_UnbanRequest)(nil),
		(*KaspadRequest_GetInfoRequest)(nil),
		(*KaspadRequest_StopNotifyingUtxosChangedRequest)(nil),
		(*KaspadRequest_NotifyPruningPointUtxoSetOverrideRequest)(nil),
		(*KaspadRequest_StopNotifyingPruningPointUtxoSetOverrideRequest)(nil),
		(*KaspadRequest_EstimateNetworkHashesPerSecondRequest)(nil),
		(*KaspadRequest_NotifyVirtualDaaScoreChangedRequest)(nil),
		(*KaspadRequest_GetBalanceByAddressRequest)(nil),
		(*KaspadRequest_GetBalancesByAddressesRequest)(nil),
		(*KaspadRequest_NotifyNewBlockTemplateRequest)(nil),
		(*KaspadRequest_GetMempoolEntriesByAddressesRequest)(nil),
		(*KaspadRequest_GetCoinSupplyRequest)(nil),
		(*KaspadRequest_PingRequest)(nil),
		(*KaspadRequest_GetMetricsRequest)(nil),
		(*KaspadRequest_GetServerInfoRequest)(nil),
		(*KaspadRequest_GetSyncStatusRequest)(nil),
		(*KaspadRequest_GetDaaScoreTimestampEstimateRequest)(nil),
		(*KaspadRequest_SubmitTransactionReplacementRequest)(nil),
		(*KaspadRequest_GetConnectionsRequest)(nil),
		(*KaspadRequest_GetSystemInfoRequest)(nil),
		(*KaspadRequest_GetFeeEstimateRequest)(nil),
		(*KaspadRequest_GetFeeEstimateExperimentalRequest)(nil),
		(*KaspadRequest_GetCurrentBlockColorRequest)(nil),
		(*KaspadRequest_GetUtxoReturnAddressRequest)(nil),
	}
	file_message_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*KaspadResponse_GetCurrentNetworkResponse)(nil),
		(*KaspadResponse_SubmitBlockResponse)(nil),
		(*KaspadResponse_GetBlockTemplateResponse)(nil),
		(*KaspadResponse_NotifyBlockAddedResponse)(nil),
		(*KaspadResponse_BlockAddedNotification)(nil),
		(*KaspadResponse_GetPeerAddressesResponse)(nil),
		(*KaspadResponse_GetSinkResponse)(nil),
		(*KaspadResponse_GetMempoolEntryResponse)(nil),
		(*KaspadResponse_GetConnectedPeerInfoResponse)(nil),
		(*KaspadResponse_AddPeerResponse)(nil),
		(*KaspadResponse_SubmitTransactionResponse)(nil),
		(*KaspadResponse_NotifyVirtualChainChangedResponse)(nil),
		(*KaspadResponse_VirtualChainChangedNotification)(nil),
		(*KaspadResponse_GetBlockResponse)(nil),
		(*KaspadResponse_GetSubnetworkResponse)(nil),
		(*KaspadResponse_GetVirtualChainFromBlockResponse)(nil),
		(*KaspadResponse_GetBlocksResponse)(nil),
		(*KaspadResponse_GetBlockCountResponse)(nil),
		(*KaspadResponse_GetBlockDagInfoResponse)(nil),
		(*KaspadResponse_ResolveFinalityConflictResponse)(nil),
		(*KaspadResponse_NotifyFinalityConflictResponse)(nil),
		(*KaspadResponse_FinalityConflictNotification)(nil),
		(*KaspadResponse_FinalityConflictResolvedNotification)(nil),
		(*KaspadResponse_GetMempoolEntriesResponse)(nil),
		(*KaspadResponse_ShutdownResponse)(nil),
		(*KaspadResponse_GetHeadersResponse)(nil),
		(*KaspadResponse_NotifyUtxosChangedResponse)(nil),
		(*KaspadResponse_UtxosChangedNotification)(nil),
		(*KaspadResponse_GetUtxosByAddressesResponse)(nil),
		(*KaspadResponse_GetSinkBlueScoreResponse)(nil),
		(*KaspadResponse_NotifySinkBlueScoreChangedResponse)(nil),
		(*KaspadResponse_SinkBlueScoreChangedNotification)(nil),
		(*KaspadResponse_BanResponse)(nil),
		(*KaspadResponse_UnbanResponse)(nil),
		(*KaspadResponse_GetInfoResponse)(nil),
		(*KaspadResponse_StopNotifyingUtxosChangedResponse)(nil),
		(*KaspadResponse_NotifyPruningPointUtxoSetOverrideResponse)(nil),
		(*KaspadResponse_PruningPointUtxoSetOverrideNotification)(nil),
		(*KaspadResponse_StopNotifyingPruningPointUtxoSetOverrideResponse)(nil),
		(*KaspadResponse_EstimateNetworkHashesPerSecondResponse)(nil),
		(*KaspadResponse_NotifyVirtualDaaScoreChangedResponse)(nil),
		(*KaspadResponse_VirtualDaaScoreChangedNotification)(nil),
		(*KaspadResponse_GetBalanceByAddressResponse)(nil),
		(*KaspadResponse_GetBalancesByAddressesResponse)(nil),
		(*KaspadResponse_NotifyNewBlockTemplateResponse)(nil),
		(*KaspadResponse_NewBlockTemplateNotification)(nil),
		(*KaspadResponse_GetMempoolEntriesByAddressesResponse)(nil),
		(*KaspadResponse_GetCoinSupplyResponse)(nil),
		(*KaspadResponse_PingResponse)(nil),
		(*KaspadResponse_GetMetricsResponse)(nil),
		(*KaspadResponse_GetServerInfoResponse)(nil),
		(*KaspadResponse_GetSyncStatusResponse)(nil),
		(*KaspadResponse_GetDaaScoreTimestampEstimateResponse)(nil),
		(*KaspadResponse_SubmitTransactionReplacementResponse)(nil),
		(*KaspadResponse_GetConnectionsResponse)(nil),
		(*KaspadResponse_GetSystemInfoResponse)(nil),
		(*KaspadResponse_GetFeeEstimateResponse)(nil),
		(*KaspadResponse_GetFeeEstimateExperimentalResponse)(nil),
		(*KaspadResponse_GetCurrentBlockColorResponse)(nil),
		(*KaspadResponse_GetUtxoReturnAddressResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
